const DEFAULT_ACCENT = '#746dba';

class ToolooUIGenerator {
  constructor(options = {}) {
    this.accentColor = options.accentColor || DEFAULT_ACCENT;
    this.fontFamily = options.fontFamily || "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif";
    console.log('ðŸŽ¨ Tooloo UI Generator ready');
  }

  generateInterface(spec = {}) {
    const {
      type = 'general-interface',
      components = [],
      title = 'TooLoo Interface',
      subtitle = 'Generated by TooLoo.ai',
      description = ''
    } = spec;

    const componentMarkup = components.length > 0
      ? components.map((component, index) => this.renderComponent(component, index)).join('\n')
      : this.renderComponent({ type: 'text-block', text: 'Add components to customize this interface.' }, 0);

    return `<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>${this.escapeHtml(title)}</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <style>
    :root {
      --accent: ${this.accentColor};
      --bg: #0f172a;
      --bg-alt: rgba(15, 23, 42, 0.6);
      --text: #f8fafc;
      --muted: #94a3b8;
      --card: rgba(148, 163, 184, 0.08);
      --border: rgba(148, 163, 184, 0.2);
    }
    * { box-sizing: border-box; }
    body {
      margin: 0;
      min-height: 100vh;
      font-family: ${this.fontFamily};
      background: radial-gradient(circle at top right, rgba(117, 130, 237, 0.25), transparent 55%), var(--bg);
      color: var(--text);
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 64px 24px;
    }
    .shell {
      width: min(1080px, 100%);
      background: linear-gradient(160deg, rgba(255,255,255,0.08), rgba(15,23,42,0.92));
      border: 1px solid var(--border);
      border-radius: 24px;
      box-shadow: 0 30px 60px -30px rgba(14, 116, 144, 0.45), inset 0 1px 0 rgba(255,255,255,0.12);
      backdrop-filter: blur(18px);
      overflow: hidden;
    }
    header {
      padding: 48px 56px 24px;
      border-bottom: 1px solid rgba(255,255,255,0.06);
      background: linear-gradient(180deg, rgba(255,255,255,0.12), transparent);
    }
    header h1 {
      margin: 0;
      font-size: 2.5rem;
      letter-spacing: -0.02em;
    }
    header p {
      margin: 12px 0 0;
      color: var(--muted);
      max-width: 52ch;
      line-height: 1.6;
    }
    main {
      padding: 40px 56px 56px;
      display: grid;
      gap: 24px;
    }
    .chip {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 6px 14px;
      border-radius: 999px;
      border: 1px solid rgba(255,255,255,0.18);
      background: rgba(255,255,255,0.08);
      color: #e2e8f0;
      font-size: 0.85rem;
      text-transform: uppercase;
      letter-spacing: 0.14em;
    }
    .component {
      background: var(--card);
      border: 1px solid rgba(255,255,255,0.08);
      border-radius: 18px;
      padding: 28px;
      backdrop-filter: blur(12px);
      box-shadow: inset 0 1px 0 rgba(255,255,255,0.06);
    }
    .component h3 {
      margin: 0 0 14px;
      font-size: 1.2rem;
    }
    .component p {
      margin: 0;
      color: var(--muted);
      line-height: 1.6;
    }
    .cta {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      margin-top: 24px;
      padding: 14px 22px;
      border-radius: 16px;
      background: linear-gradient(135deg, var(--accent), #8a5cf6);
      color: white;
      font-weight: 600;
      text-decoration: none;
      border: none;
      cursor: pointer;
      box-shadow: 0 18px 40px -20px rgba(117, 130, 237, 0.8);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .cta:hover {
      transform: translateY(-2px);
      box-shadow: 0 24px 40px -18px rgba(117, 130, 237, 0.9);
    }
  </style>
</head>
<body>
  <div class="shell">
    <header>
      <span class="chip">${this.escapeHtml(type.replace(/-/g, ' '))}</span>
      <h1>${this.escapeHtml(title)}</h1>
      <p>${this.escapeHtml(subtitle || description)}</p>
    </header>
    <main>
      ${componentMarkup}
    </main>
  </div>
</body>
</html>`;
  }

  addToolooIntegration(existingHTML, options = {}) {
    const analyticsSnippet = `<!-- TooLoo instrumentation -->\n<script>\n  window.tooloo = window.tooloo || { session: Date.now(), options: ${JSON.stringify(options)} };\n  console.info('[TooLoo] UI enhanced with live instrumentation.');\n</script>`;

    if (!existingHTML || typeof existingHTML !== 'string') {
      return this.generateInterface({ title: 'TooLoo Enhanced UI', subtitle: 'Default interface generated because no HTML was supplied.' });
    }

    if (existingHTML.includes('TooLoo instrumentation')) {
      return existingHTML;
    }

    const insertionPoint = existingHTML.lastIndexOf('</body>');
    if (insertionPoint === -1) {
      return `${existingHTML}\n${analyticsSnippet}`;
    }

    return `${existingHTML.slice(0, insertionPoint)}\n${analyticsSnippet}\n${existingHTML.slice(insertionPoint)}`;
  }

  analyzeUI(html = '') {
    const tagMatches = html.match(/<([a-z0-9-]+)/gi) || [];
    const tagCounts = tagMatches.reduce((acc, tag) => {
      const clean = tag.replace('<', '').toLowerCase();
      acc[clean] = (acc[clean] || 0) + 1;
      return acc;
    }, {});

    const componentEstimate = Object.keys(tagCounts).filter((tag) => ['section', 'article', 'div', 'main', 'aside'].includes(tag)).length;

    return {
      tags: tagCounts,
      densityScore: Math.min(1, tagMatches.length / 120),
      componentEstimate,
      summary: `Detected ${tagMatches.length} HTML tags with approximately ${componentEstimate} structural components.`
    };
  }

  renderComponent(component = {}, index = 0) {
    const type = component.type || 'text-block';
    switch (type) {
      case 'stat-card':
        return `<section class="component">
  <h3>${this.escapeHtml(component.title || 'Key Metric')}</h3>
  <p>${this.escapeHtml(component.value || '42')}</p>
</section>`;
      case 'cta':
        return `<section class="component">
  <h3>${this.escapeHtml(component.title || 'Ready to continue?')}</h3>
  <button class="cta">${this.escapeHtml(component.label || 'Take action')}</button>
</section>`;
      case 'list':
        return `<section class="component">
  <h3>${this.escapeHtml(component.title || 'Highlights')}</h3>
  <p>${this.escapeHtml(component.description || 'Quick summary of what matters most right now.')}</p>
</section>`;
      case 'text-block':
      default:
        return `<section class="component">
  <h3>${this.escapeHtml(component.title || `Section ${index + 1}`)}</h3>
  <p>${this.escapeHtml(component.text || 'Describe the purpose of this section to guide your users clearly.')}</p>
</section>`;
    }
  }

  escapeHtml(value) {
    return String(value || '')
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
}

module.exports = ToolooUIGenerator;
