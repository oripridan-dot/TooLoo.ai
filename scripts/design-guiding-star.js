#!/usr/bin/env node

// Guiding Star: Real design capability demo
// - Ensures web-server is running
// - Calls /api/v1/design/brandboard to generate a PDF
// - Creates a themed product page HTML using the same tokens
// - Writes a JSON report with artifact URLs

import { spawn } from 'child_process';
import fs from 'fs/promises';
import path from 'path';

const WEB_PORT = Number(process.env.WEB_PORT || 3000);
const HOST = `http://127.0.0.1:${WEB_PORT}`;
const webAppDir = path.join(process.cwd(), 'web-app');
const tempDir = path.join(webAppDir, 'temp');

async function wait(ms){ return new Promise(r=>setTimeout(r, ms)); }

async function probe(url){
  try { const r = await fetch(url, { method:'GET' }); return r.ok; } catch { return false; }
}

async function ensureWebServer(){
  if (await probe(`${HOST}/health`)) return { started:false };
  const p = spawn('node', ['servers/web-server.js'], { stdio:'ignore', detached:true });
  p.unref();
  const start = Date.now();
  while (Date.now() - start < 8000){
    if (await probe(`${HOST}/health`)) return { started:true, pid: p.pid };
    await wait(200);
  }
  throw new Error('Web server did not become healthy on time');
}

function sampleTokens(){
  return {
    name: 'TooLoo Guiding Star',
    tokens: {
      brand: '#7C5CFF',
      brandAlt: '#00E9B0',
      accent: '#FFE770',
      danger: '#FF5C7C',
      text: '#E6E9EE',
      muted: '#96A0AF',
      surface: '#14181E',
      bg: '#0B0D10'
    },
    fonts: {
      display: 'Playfair Display',
      body: 'Inter'
    }
  };
}

async function createBrandBoard({ name, tokens, fonts }){
  const r = await fetch(`${HOST}/api/v1/design/brandboard`, {
    method:'POST', headers:{ 'Content-Type':'application/json' },
    body: JSON.stringify({ tokens, fonts, name })
  });
  if (!r.ok) throw new Error(`brandboard failed: ${r.status}`);
  const j = await r.json();
  if (!j.ok) throw new Error(`brandboard error: ${j.error||'unknown'}`);
  return { url: j.url, file: j.file };
}

function productPageHTML({ name, tokens }){
  const css = `:root{--brand:${tokens.brand};--brandAlt:${tokens.brandAlt};--accent:${tokens.accent};--text:${tokens.text};--muted:${tokens.muted};--surface:${tokens.surface};--bg:${tokens.bg};}
  *{box-sizing:border-box} body{margin:0;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto;background:var(--bg);color:var(--text);} 
  .hero{padding:64px 24px;background:linear-gradient(120deg, rgba(124,92,255,0.2), rgba(0,233,176,0.15));border-bottom:1px solid rgba(150,160,175,0.15)}
  .wrap{max-width:1080px;margin:0 auto}
  .badge{display:inline-block;padding:6px 10px;border:1px solid rgba(150,160,175,0.3);border-radius:999px;color:var(--muted);font-size:12px;margin-bottom:12px}
  h1{font-family:Playfair Display,serif;font-weight:700;font-size:48px;margin:8px 0}
  p.sub{font-size:16px;color:var(--muted);max-width:720px}
  .cta{margin-top:24px;display:flex;gap:12px;flex-wrap:wrap}
  .btn{padding:12px 16px;border-radius:10px;border:1px solid rgba(150,160,175,0.35);background:#151923;color:var(--text);text-decoration:none}
  .btn.primary{background:var(--brand);color:#0b0d10;border-color:transparent}
  .features{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:16px;padding:24px}
  .card{background:#12161c;border:1px solid rgba(150,160,175,0.2);border-radius:12px;padding:16px}
  .dot{display:inline-block;width:8px;height:8px;border-radius:50%;background:var(--accent);margin-right:6px}
  footer{padding:24px;color:var(--muted);font-size:12px;border-top:1px solid rgba(150,160,175,0.15)} `;

  return `<!doctype html><html lang="en"><head>
  <meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>${name} — Product Page</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
  <style>${css}</style></head><body>
  <section class="hero"><div class="wrap">
    <span class="badge"><span class="dot"></span>Real Artifact • Generated by TooLoo</span>
    <h1>${name}</h1>
    <p class="sub">A focused, fast, and delightful design flow powered by TooLoo’s training engines and live design tokens. This page and the brand board PDF were generated automatically.</p>
    <div class="cta">
      <a class="btn primary" id="openPdf">Open Brand Board PDF</a>
      <a class="btn" href="/control-room" target="_blank">Open Control Room</a>
    </div>
  </div></section>
  <section class="features wrap">
    <div class="card"><h3>Design Tokens</h3><p>Primary brand: <b>${tokens.brand}</b>. Accent: <b>${tokens.accent}</b>. Surface: <b>${tokens.surface}</b>.</p></div>
    <div class="card"><h3>Consistency</h3><p>Typography pairs Playfair Display for headings with Inter for body.</p></div>
    <div class="card"><h3>Speed</h3><p>Artifacts built in seconds via the web proxy and orchestration.</p></div>
  </section>
  <footer class="wrap">© ${new Date().getFullYear()} TooLoo.ai — Guiding Star demo</footer>
  <script> // pdfUrl injected at write time </script>
  </body></html>`;
}

async function writeFileSafe(filePath, content){
  await fs.mkdir(path.dirname(filePath), { recursive: true });
  await fs.writeFile(filePath, content, 'utf8');
}

async function main(){
  const ensured = await ensureWebServer();
  const { name, tokens, fonts } = sampleTokens();
  const ts = Date.now();

  // 1) Generate brand board PDF via real endpoint
  const pdf = await createBrandBoard({ name, tokens, fonts });

  // 2) Create a themed product page that links to the PDF
  const htmlPath = path.join(tempDir, `guiding-star-product-${ts}.html`);
  let html = productPageHTML({ name, tokens });
  const pdfUrl = pdf.url?.startsWith('/temp/') ? pdf.url : `/temp/${path.basename(pdf.file||'')}`;
  html = html.replace('<script> // pdfUrl injected at write time </script>', `<script>document.getElementById('openPdf').href='${pdfUrl}';document.getElementById('openPdf').target='_blank';</script>`);
  await writeFileSafe(htmlPath, html);

  // 3) Report JSON summary
  const report = {
    ok: true,
    startedWeb: ensured.started || false,
    time: new Date().toISOString(),
    artifacts: {
      pdf: { url: pdfUrl, file: pdf.file },
      page: { url: `/temp/${path.basename(htmlPath)}`, file: htmlPath }
    },
    tokens, fonts
  };
  const reportPath = path.join(tempDir, `guiding-star-report-${ts}.json`);
  await writeFileSafe(reportPath, JSON.stringify(report, null, 2));

  // Stable convenience URLs
  const latestPageUrl = `${HOST}/temp/latest-page`;
  const latestPdfUrl = `${HOST}/temp/latest-pdf`;
  const indexUrl = `${HOST}/temp/index`;

  // Console summary for quick copy/open (stable first, then full report)
  console.log('\nGuiding Star — Real Artifacts Ready');
  console.log(`Product page (stable): ${latestPageUrl}`);
  console.log(`Brand board PDF (stable): ${latestPdfUrl}`);
  console.log(`All artifacts: ${indexUrl}`);
  console.log('\nDetailed report:');
  console.log(JSON.stringify(report, null, 2));

  // Best-effort: auto-open in host browser if available
  try {
    const opener = spawn('bash', ['-lc', `"$BROWSER" ${latestPageUrl} || true`], { detached:true, stdio:'ignore' });
    opener.unref();
  } catch {}
}

main().catch(e=>{ console.error('Guiding Star failed:', e.message || e); process.exit(1); });
